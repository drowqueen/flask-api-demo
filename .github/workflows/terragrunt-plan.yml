name: Terragrunt Plan

on:
  push:
    branches-ignore:
      - main
    paths:
      - '**/*.tf'
      - '**/*.hcl'
      - '.github/workflows/terragrunt-plan.yml'
      - 'terraform/**/main.tf'
      - 'terraform/**/terragrunt.hcl'
  workflow_dispatch:

jobs:
  terragrunt-plan:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'  # make sure branch is not main
    steps:
      - name: Checkout repo with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # full git history for merge-base

      - name: Setup AWS credentials
        uses: ./.github/actions/aws-setup
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Setup Terragrunt
        uses: ./.github/actions/terragrunt-setup

      - name: Cache Terragrunt cache
        uses: actions/cache@v4
        with:
          path: terraform/.terragrunt-cache
          key: ${{ runner.os }}-terragrunt-${{ hashFiles('terraform/**/*.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terragrunt-

      - name: Find changed terragrunt directories cumulatively since branch divergence
        id: changed-dirs
        shell: bash
        run: |
          set -e

          # Fetch main branch to get up-to-date refs
          git fetch origin main

          # Find merge base between current HEAD and origin/main branch
          BASE_SHA=$(git merge-base HEAD origin/main)
          echo "Merge base commit (branch divergence point): $BASE_SHA"

          # Get changed terraform files cumulatively since branch divergence
          CHANGED_FILES=$(git diff --name-only "$BASE_SHA" HEAD | grep '^terraform/.*\.\(tf\|hcl\)$' || true)

          MODULE_CHANGED_FILES=$(echo "$CHANGED_FILES" | grep '^terraform/modules/' || true)
          TERRAGRUNT_CHANGED_FILES=$(echo "$CHANGED_FILES" | grep -v '^terraform/modules/' || true)

          DIRS=""

          # Add stacks directly changed outside modules
          for file in $TERRAGRUNT_CHANGED_FILES; do
            d=$(dirname "$file")
            while [[ "$d" != "terraform" && "$d" != "." ]]; do
              if [[ -f "$d/terragrunt.hcl" ]]; then
                DIRS="$DIRS $d"
                break
              fi
              d=$(dirname "$d")
            done
          done

          # Add stacks referencing changed modules
          if [[ -n "$MODULE_CHANGED_FILES" ]]; then
            MODULE_NAMES=$(echo "$MODULE_CHANGED_FILES" | awk -F/ '{print $3}' | sort -u)
            ALL_TG_DIRS=$(find terraform -type f -name terragrunt.hcl -exec dirname {} \;)

            for tgdir in $ALL_TG_DIRS; do
              for module_name in $MODULE_NAMES; do
                if grep -q "\.\.//modules/$module_name" "$tgdir/terragrunt.hcl"; then
                  DIRS="$DIRS $tgdir"
                  break
                fi
              done
            done
          fi

          # Remove duplicates and trim whitespace
          DIRS=$(echo "$DIRS" | tr ' ' '\n' | sort -u | tr '\n' ' ' | xargs)

          echo "dirs=$DIRS" >> "$GITHUB_OUTPUT"

      - name: Run Terragrunt plan in changed directories
        if: steps.changed-dirs.outputs.dirs != ''
        run: |
          IFS=' ' read -r -a dirs <<< "${{ steps.changed-dirs.outputs.dirs }}"
          for d in "${dirs[@]}"; do
            echo "==> Running terragrunt plan in $d"
            (cd "$d" && terragrunt init --terragrunt-non-interactive && terragrunt plan --terragrunt-non-interactive)
          done
